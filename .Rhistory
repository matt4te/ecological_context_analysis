t8 <- t
# for track 9
t <- track9
cal <- cal9
t$dt <- NA
t$d <- NA
t$st <- NA
b <- 3
for (i in seq(from=1,to=nrow(t),by=b)){
dx <- t[i+b,c("x")] - t[i,c("x")]
dy <- t[i+b,c("y")] - t[i,c("y")]
d <- sqrt(dx^2 + dy^2) / 10
dt <- atan2(dx,dy)*180/pi
dt <- dt + 90
if (dt<0){dt <- 360 + dt}
if (dt>360){dt <- dt - 360}
t[i,c("dt")] <- dt
t[i,c("d")] <- d
sx <- cal4[2,c("X")] - t[i,c("x")]
sy <- cal4[2,c("X")] - t[i,c("y")]
st <- atan2(sx,sy)*180/pi
st <- -(st + 90)
if (st<0){st <- 360 + st}
if (st>360){st <- st - 360}
t[i,c("st")] <- st
}
t9 <- t
# define circ stats functions
circStats <- function(x) { # define descriptive statistics function
n = nrow(x[!is.na(x$dt),])
bearing = mean.circular(x$dt,na.rm=TRUE)
sdbearing = sd.circular(x$dt,na.rm=TRUE)
ray = rayleigh.test(na.omit(x$dt),mu=0)
r = ray$statistic
p = ray$p.value
signif = p < 0.05
return(data.frame(n, bearing, sdbearing, r, p, signif))
}
circStats2 <- function(x) { # define descriptive statistics function
n = nrow(x[!is.na(x$tt),])
bearing = mean.circular(x$tt,na.rm=TRUE)
sdbearing = sd.circular(x$tt,na.rm=TRUE)
ray = rayleigh.test(na.omit(x$tt),mu=0)
r = ray$statistic
p = ray$p.value
signif = p < 0.05
return(data.frame(n, bearing, sdbearing, r, p, signif))
}
# test for upstream orientation (specify mu=0 for upstream direction)
t4$dt <- as.circular(t4$dt,type="angles",units="degrees")
c4 <- circStats(t4)
t5$dt <- as.circular(t5$dt,type="angles",units="degrees")
c5 <- circStats(t5)
t7$dt <- as.circular(t7$dt,type="angles",units="degrees")
c7 <- circStats(t7)
t8$dt <- as.circular(t8$dt,type="angles",units="degrees")
c8 <- circStats(t8)
t9$dt <- as.circular(t9$dt,type="angles",units="degrees")
c9 <- circStats(t9)
# determine orientation relative to the source
t4$tt <- t4$dt - t4$st
t4$tt <- as.circular(t4$tt, type="angles", units="degrees")
sc4 <- circStats2(t4)
t5$tt <- t5$dt - t5$st
t5$tt <- as.circular(t5$tt, type="angles", units="degrees")
sc5 <- circStats2(t5)
t7$tt <- t7$dt - t7$st
t7$tt <- as.circular(t7$tt, type="angles", units="degrees")
sc7 <- circStats2(t7)
t8$tt <- t8$dt - t8$st
t8$tt <- as.circular(t8$tt, type="angles", units="degrees")
sc8 <- circStats2(t8)
t9$tt <- t9$dt - t9$st
t9$tt <- as.circular(t9$tt, type="angles", units="degrees")
sc9 <- circStats2(t9)
# here is the function to do it
turnAngleCalc <- function(x,samp,fr){
# x is the data frame
# samp your sampling frequency (e.g., 1 is one second intervals, 0.5 is half second intervals)
# fr is the number of frames per second for the images
# exp is the experiment number to label the file
b <- samp * fr
trackz <- x
trackz$xx <- 0
trackz$yy <- 0
trackz$bearing <- 0
trackz$turnAngle <- 0
for (i in seq(from=1,to=nrow(trackz),by=b)){
trackz[i,c("xx")] <- trackz[i+b,c("x")] - trackz[i,c("x")]
trackz[i,c("yy")] <- trackz[i+b,c("y")] - trackz[i,c("y")]
trackz[i,c("bearing")] <- angleFun(trackz[i,c("xx")],trackz[i,c("yy")])
if (is.na(trackz[i,c("bearing")])) {
trackz[i,c("bearing")] = trackz[i-1,c("bearing")]
}
if (trackz[i,c("bearing")] == 0) {
trackz[i,c("bearing")] <- 360
}
}
for (i in seq(from=1,to=nrow(trackz)-b,by=b)) {
angle <- trackz[i+b,c("bearing")] - trackz[i,c("bearing")]
if (angle <= 0) {
angle = angle + 360
}
trackz[i,c("turnAngle")] <- angle
}
trackz[trackz$turnAngle == 360,c("turnAngle")] <- 0
trackz$absAngle <- trackz$turnAngle
trackz$turnDir <- trackz$turnAngle
trackz[trackz$turnAngle > 180,c("absAngle")] <- -trackz[trackz$turnAngle > 180,c("turnAngle")] +360
trackz[trackz$turnAngle > 180,c("turnDir")] <-trackz[trackz$turnAngle > 180,c("turnAngle")] - 360
return(trackz)
}
angleFun <- function(xx,yy){
## xx and yy are the differences in x and y coordinates between two points
c = 180/pi
b<-sign(xx)
b[b==0]<-1  #corrects for the fact that sign(0) == 0
tempangle = b*(yy<0)*pi+atan(xx/yy)
tempangle[tempangle<0]<-tempangle[tempangle<0]+2*pi
return(tempangle*c)
}
# now do it
trak4 <- turnAngleCalc(t4,0.1,40)
trak5 <- turnAngleCalc(t5,0.1,40)
trak7 <- turnAngleCalc(t7,0.1,40)
trak8 <- turnAngleCalc(t8,0.1,30)
trak9 <- turnAngleCalc(t9,0.1,30)
trak4$exp <- 4
trak5$exp <- 5
trak7$exp <- 7
trak8$exp <- 8
trak9$exp <- 9
traks <- rbind(trak4,trak5,trak7,trak9)
ggplot(traks[traks$turnDir!=0,], aes(x=turnDir)) +
geom_histogram(binwidth=5) + theme_bw() +
xlab("Turning Angle") + theme(axis.title.y=element_blank())
ggplot(t4) + polar() +
geom_point(aes(x=dt,y=d,color=frame)) + ylab("Distance (cm)") + xlab("Direction") +
scale_x_continuous("", limits=c(0,360), breaks=seq(0,360-1,by=45), labels=c("Upstream","","Right","","Downstream","","Left",""))
ggplot(t5) + polar() +
geom_point(aes(x=dt,y=d,color=frame)) + ylab("Distance (cm)") + xlab("Direction") + ylim(0,4) +
scale_x_continuous("", limits=c(0,360), breaks=seq(0,360-1,by=45), labels=c("Upstream","","Right","","Downstream","","Left",""))
ggplot(t7) + polar() +
geom_point(aes(x=dt,y=d,color=frame)) + ylab("Distance (cm)") + xlab("Direction") +
scale_x_continuous("", limits=c(0,360), breaks=seq(0,360-1,by=45), labels=c("Upstream","","Right","","Downstream","","Left",""))
ggplot(t9) + polar() +
geom_point(aes(x=dt,y=d,color=frame)) + ylab("Distance (cm)") + xlab("Direction") +
scale_x_continuous("", limits=c(0,360), breaks=seq(0,360-1,by=45), labels=c("Upstream","","Right","","Downstream","","Left",""))
trakz <- traks[!is.na(traks$dt),]
trakz$change <- NA
changeDetect <- function(x){
for (i in 2:nrow(x)){
change <- x[i,c("concentration")] - x[i-1,c("concentration")]
if (change>0){x[i,c("change")] <- "inc"}
if (change<0){x[i,c("change")] <- "dec"}
}
return(x)
}
traker <- ddply(trakz,~exp,changeDetect)
traker[is.na(traker$change),c("change")] <- "same"
# summarize some important variables within each condition
changeSummary <- function(x){
n=nrow(x)
x$dt <- as.circular(x$dt,type="angles", units="degrees")
angle <- mean.circular(x$dt)
step <- mean(x$d)
turn <- mean(x$absAngle)
return(data.frame(n,angle,step,turn))
}
changeSum <- ddply(traker,~change,changeSummary)
View(changeSum)
View(track4)
View(trak4)
nrow[trak4$dt <= 10 | trak4$dt >= 350,]/nrow[trak4]
nrow(trak4[trak4$dt <= 10 | trak4$dt >= 350,])/nrow(trak4)
nrow(trak5[trak5$dt <= 10 | trak5$dt >= 350,])/nrow(trak5)
nrow(trak7[trak7$dt <= 10 | trak7$dt >= 350,])/nrow(trak7)
nrow(trak8[trak8$dt <= 10 | trak8$dt >= 350,])/nrow(trak8)
nrow(trak9[trak9$dt <= 10 | trak9$dt >= 350,])/nrow(trak9)
ri4 <- nrow(trak4[trak4$dt <= 10 | trak4$dt >= 350,])/nrow(trak4)
ri5 <- nrow(trak5[trak5$dt <= 10 | trak5$dt >= 350,])/nrow(trak5)
ri7 <- nrow(trak7[trak7$dt <= 10 | trak7$dt >= 350,])/nrow(trak7)
ri8 <- nrow(trak8[trak8$dt <= 10 | trak8$dt >= 350,])/nrow(trak8)
ri9 <- nrow(trak9[trak9$dt <= 10 | trak9$dt >= 350,])/nrow(trak9)
rit <- (ri4+ri5+ri7+ri9)
rit
rit <- (ri4+ri5+ri7+ri9)/4
rit
ri8
# read your data log
log1 <- read.csv(str_c(dir,"october_2016","dms_sampling_log.csv",sep="/"),stringsAsFactors=FALSE)
log2 <- read.csv(str_c(dir,"november_2016","dms_sampling_log.csv",sep="/"),stringsAsFactors=FALSE)
log2$trial_id <- log2$trial_id + 6
log3 <- read.csv(str_c(dir,"february_2017","dms_sampling_log.csv",sep="/"),stringsAsFactors=FALSE)
colnames(log3)[1] <- "trial_id"
log4 <- read.csv(str_c(dir,"march_2017","dms_sampling_log.csv",sep="/"),stringsAsFactors=FALSE)
colnames(log4)[1] <- "trial_id"
log4 <- log4[!is.na(log4$trial_id),]
# paste it together
log <- rbind(log1,log2,log3,log4)
# some cleaning up
log$trial_id <- as.integer(log$trial_id)
log$tide <- as.factor(log$tide)
log$light <- as.factor(log$light)
log$richness <- as.numeric(log$richness)
log$abundance <- as.numeric(log$abundance)
log$datetime <- as.POSIXct(str_c(log$date," ",log$time,sep=""),format="%m/%d/%Y %H:%M")
log$dms <- log$X.dms.
log$sample <- log$sample.
log <- select(log,datetime,time,trial_id,sample,tide,light,dms,biological,richness, abundance,notes)
dir <- "C:/Users/mattf/Desktop/RSMAS/dms_variation_data"
# load required libraries
library("stringr")
library("ggplot2")
library("plyr")
library("dplyr")
library("quantreg")
# read your data log
log1 <- read.csv(str_c(dir,"october_2016","dms_sampling_log.csv",sep="/"),stringsAsFactors=FALSE)
log2 <- read.csv(str_c(dir,"november_2016","dms_sampling_log.csv",sep="/"),stringsAsFactors=FALSE)
log2$trial_id <- log2$trial_id + 6
log3 <- read.csv(str_c(dir,"february_2017","dms_sampling_log.csv",sep="/"),stringsAsFactors=FALSE)
colnames(log3)[1] <- "trial_id"
log4 <- read.csv(str_c(dir,"march_2017","dms_sampling_log.csv",sep="/"),stringsAsFactors=FALSE)
colnames(log4)[1] <- "trial_id"
log4 <- log4[!is.na(log4$trial_id),]
# paste it together
log <- rbind(log1,log2,log3,log4)
# some cleaning up
log$trial_id <- as.integer(log$trial_id)
log$tide <- as.factor(log$tide)
log$light <- as.factor(log$light)
log$richness <- as.numeric(log$richness)
log$abundance <- as.numeric(log$abundance)
log$datetime <- as.POSIXct(str_c(log$date," ",log$time,sep=""),format="%m/%d/%Y %H:%M")
log$dms <- log$X.dms.
log$sample <- log$sample.
log <- select(log,datetime,time,trial_id,sample,tide,light,dms,biological,richness, abundance,notes)
logB <- log[log$biological == "TRUE",]
logB$catch <- "TRUE"
logB[logB$abundance == 0, c("catch")] <- "FALSE"
logB$catch <- as.logical(logB$catch)
mean(logB[logB$catch=="TRUE",c("dms")])
mean(logB[logB$catch=="FALSE",c("dms")])
logitFit <- glm(catch ~ dms+trial_id, data=logB, family="binomial")
summary(logitFit)
nrow(logB[logB$catch=="TRUE",c("dms")])
nrow(logB[logB$catch=="TRUE",])
nrow(logB[logB$catch=="FALSE",])
mean(logB[logB$catch=="FALSE",c("dms")])
logC <- subset(logB, catch=="TRUE")
logS <- ddply(log, .(tide,light), summarise, avg = mean(dms), sd = sd(dms), se= sd(dms)/sqrt(length(dms)))
logS
logS <- ddply(log, .(tide,light), summarise, N= length(dms), avg = mean(dms), sd = sd(dms), se= sd(dms)/sqrt(length(dms)))
logS
# all data boxplot
qplot(datetime, dms, data = log, geom = "boxplot") +
xlab("") + ylab("[DMS] (nm)") +   theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# tide boxplot
ggplot(data=log, aes(y=dms, x=tide)) +
geom_boxplot() + ylab("[DMS] (nm)")
# light boxplot
ggplot(data=log, aes(y=dms, x=light)) +
geom_boxplot() + ylab("[DMS] (nm)")
logL <- ddply(log, .(light), summarise, N= length(dms), avg = mean(dms), sd = sd(dms), se= sd(dms)/sqrt(length(dms)))
logL
ggplot(data=log, aes(y=dms, x=light)) +
geom_boxplot() + ylab("[DMS] (nm)") + xlab("Time of Day") +
theme_bw()
?t.test
t.test(log[log$light=="night",c("dms")],log[log$light=="day",c("dms")])
ggplot(data=log, aes(y=dms, x=tide)) +
geom_boxplot() + ylab("[DMS] (nm)")
ggplot(data=log, aes(y=dms, x=tide)) +
geom_boxplot() + ylab("[DMS] (nm)") + xlab("Tidal Cycle") +
theme_bw()
t.test(log[log$tide=="ebb",c("dms")],log[log$tide=="flood",c("dms")])
logT
logT <- ddply(log, .(tide), summarise, N= length(dms), avg = mean(dms), sd = sd(dms), se= sd(dms)/sqrt(length(dms)))
logT
logB <- log[log$biological == "TRUE",]
ggplot(logB, aes(x=dms,y=richness)) + geom_point() + geom_smooth(method="lm") +
xlab("[DMS] (nm)") + ylab("Species Richness")
richM <- lm(richness~dms+trial_id,data=logB)
summary(richM)
richM <- lm(richness~dms,data=logB)
summary(richM)
logC <- subset(logB, catch=="TRUE")
ggplot(logC, aes(x=dms,y=richness)) + geom_point() + geom_smooth(method="lm") +
xlab("[DMS] (nm)") + ylab("Species Richness")
richMc <- lm(richness~dms+trial_id,data=logC)
summary(richMc)
logB$catch <- "TRUE"
logB[logB$abundance == 0, c("catch")] <- "FALSE"
logB$catch <- as.logical(logB$catch)
logC <- subset(logB, catch=="TRUE")
ggplot(logC, aes(x=dms,y=richness)) + geom_point() + geom_smooth(method="lm") +
xlab("[DMS] (nm)") + ylab("Species Richness")
richMc <- lm(richness~dms+trial_id,data=logC)
summary(richMc)
richMc <- lm(richness~dms,data=logC)
summary(richMc)
ggplot(logC, aes(x=dms,y=abundance)) + geom_point() + geom_smooth(method="lm") +
xlab("[DMS] (nm)") + ylab("Larval Abundance")
richAc <- lm(abundance~dms+trial_id,data=logC)
summary(richAc)
richAc <- lm(abundance~dms,data=logC)
summary(richAc)
richMc <- lm(richness~dms+trial_id,data=logC)
summary(richMc)
QRrAll <- rq(richness ~ dms, tau=seq(.2,.8,by=.2),data=logB)
summary(QRrAll, se="ker")
QRaAll <- rq(abundance ~ dms, tau=seq(.2,.8,by=.2),data=logB)
summary(QRaAll, se="ker")
plot(summary(QRrAll))
plot(summary(QRaAll))
ggplot(logC,aes(x=dms,y=abundance)) + geom_point() +
geom_quantile(quantiles=c(0.2),aes(color="red"),size=1) +
geom_quantile(quantiles=c(0.4),aes(color="blue"),size=1) +
geom_quantile(quantiles=c(0.6),aes(color="orange"),size=1) +
geom_quantile(quantiles=c(0.8),aes(color="green"),size=1) +
scale_color_manual(name="Quantiles",breaks=c("red","blue","orange","green"),
values=c("red","blue","orange","green"),
labels=c("20%","40%","60%","80%")) +
xlab("[DMS] (nm)") + ylab("Larval Abundance") +
theme_bw()
ggplot(logC,aes(x=dms,y=abundance)) + geom_point() +
geom_quantile(quantiles=c(0.2),aes(color="red"),size=1) +
geom_quantile(quantiles=c(0.4),aes(color="blue"),size=1) +
geom_quantile(quantiles=c(0.6),aes(color="orange"),size=1) +
geom_quantile(quantiles=c(0.8),aes(color="green"),size=1) +
scale_color_manual(name="Quantiles",breaks=c("red","blue","orange","green"),
values=c("red","blue","orange","green"),
labels=c("20%","40%","60%","80%")) +
xlab("[DMS] (nm)") + ylab("Larval Abundance") +
theme_bw() + coord_fixed()
ggplot(logC,aes(x=dms,y=richness)) + geom_point() +
geom_quantile(quantiles=c(0.2),aes(color="red"),size=1) +
geom_quantile(quantiles=c(0.4),aes(color="blue"),size=1) +
geom_quantile(quantiles=c(0.6),aes(color="orange"),size=1) +
geom_quantile(quantiles=c(0.8),aes(color="green"),size=1) +
scale_color_manual(name="Quantiles",breaks=c("red","blue","orange","green"),
values=c("red","blue","orange","green"),
labels=c("20%","40%","60%","80%")) +
xlab("[DMS] (nm)") + ylab("Larval Richness") +
theme_bw() + coord_fixed()
ggplot(logC,aes(x=dms,y=richness)) + geom_point() +
geom_quantile(quantiles=c(0.2),aes(color="red"),size=1) +
geom_quantile(quantiles=c(0.4),aes(color="blue"),size=1) +
geom_quantile(quantiles=c(0.6),aes(color="orange"),size=1) +
geom_quantile(quantiles=c(0.8),aes(color="green"),size=1) +
scale_color_manual(name="Quantiles",breaks=c("red","blue","orange","green"),
values=c("red","blue","orange","green"),
labels=c("20%","40%","60%","80%")) +
xlab("[DMS] (nm)") + ylab("Larval Richness") +
theme_bw()
ggplot(logC,aes(x=dms,y=richness)) + geom_point() +
geom_quantile(quantiles=c(0.2),aes(color="red"),size=1) +
geom_quantile(quantiles=c(0.4),aes(color="blue"),size=1) +
geom_quantile(quantiles=c(0.6),aes(color="orange"),size=1) +
geom_quantile(quantiles=c(0.8),aes(color="green"),size=1) +
scale_color_manual(name="Quantiles",breaks=c("red","blue","orange","green"),
values=c("red","blue","orange","green"),
labels=c("20%","40%","60%","80%")) +
xlab("[DMS] (nm)") + ylab("Larval Richness") +
theme_bw() + coord_fixed()
# setwd("D:/Belize_DISC_2016/DATA")
setwd("C:/Users/mattf/Desktop/RSMAS/ecological_context")
# load relevant libraries
library("discr")
library("plyr")
library("stringr")
library("ggplot2")
library("lubridate")
library("circular")
library("mapproj")
library("maptools")
library("ggmap")
library("rgeos")
library("grid")
library("maps")
library("geosphere")
source("./sun_position.R")
source("./map_aids.R")
setwd("C:/Users/mattf/Desktop/RSMAS/ecological_context")
# read log and stats files, join them
log <- read.csv("deployment_log2.csv")
log <- within(log, rm("X","X.1"))
stats <- read.csv("belize16_stats_file.csv")
stats <- within(stats, rm("X"))
d <- join(log,stats,by="deploy_id",type="right") # keep only deployments with stats data
# read the hobo data in
hobo <- read.csv("belize16_hobo_file.csv")
d <- join(d,hobo,by="deploy_id",type="left") # keep all deployments, match hobo where we have it
# correct a couple rows with celsius temperatures
d[!is.na(d$meanTemp) & d$meanTemp < 50,c("meanTemp")] <- d[!is.na(d$meanTemp) & d$meanTemp < 50,c("meanTemp")] * (9/5) + 32
# read the artifacts data
artifacts <- read.csv("belize16_artifacts_file.csv")
d <- join(d,artifacts,by="deploy_id",type="left") # keep all deployments, match artifacts where we have it
# change any data types if necessary, e.g.
str(d)
d$deploy_id <- as.factor(d$deploy_id)
d$depth..m. <- as.factor(d$depth..m.)
d$fish_age..dph. <- as.numeric(d$fish_age..dph.)
d$bin_id <- as.factor(d$bin_id)
d$batch_id <- as.factor(d$batch_id)
d$wind_dir <- as.circular(as.numeric(as.character(d$wind_dir)), units="degrees")
d$drift_direction <- as.circular(as.numeric(as.character(d$drift_direction)), units="degrees")
d$drift_distance <- as.numeric(d$drift_distance)
d$In_Behavior <- as.factor(d$In_Behavior)
d$mean <- as.circular(d$mean, units="degrees")
d$se.mean <- as.circular(d$se.mean, units="degrees")
d$dir.mean <- as.circular(d$dir.mean, units="degrees")
d$dir.se.mean <- as.circular(d$dir.se.mean, units="degrees")
d$turn.abs.mean <- as.circular(d$turn.abs.mean, units="degrees")
d$moonAlt <- as.circular(as.numeric(as.character(d$moonAlt)), units="degrees")
d$moonAz <- as.circular(as.numeric(as.character(d$moonAz)), units="degrees")
d$moonHor <- as.logical(d$moonHor)
# add a discrete dateTime variable
# see ?strptime
timeIn <- as.POSIXct(str_c(d$date_start," ", d$time_start,sep=""),format="%m/%d/%Y %H:%M:%S")
d$dateTime <- timeIn + minutes(10) # we asssume deployments are ~20 minutes and we use the midpoint of the deployment
# fix the gps variables
lat1 <- str_split_fixed(as.character(d$lat_start),pattern="'",n=2)
d$lat_start <- (as.numeric(lat1[,1]) + as.numeric(lat1[,2])/60)
lat2 <- str_split_fixed(as.character(d$lat_stop),pattern="'",n=2)
d$lat_stop <- (as.numeric(lat2[,1]) + as.numeric(lat2[,2])/60)
lon1 <- str_split_fixed(as.character(d$lon_start),pattern="'",n=2)
d$lon_start <- -(as.numeric(lon1[,1]) + as.numeric(lon1[,2])/60)
lon2 <- str_split_fixed(as.character(d$lon_stop),pattern="'",n=2)
d$lon_stop <- -(as.numeric(lon2[,1]) + as.numeric(lon2[,2])/60)
d[d$art==TRUE,c("signif")] <- FALSE
d <- d[d$signif == "TRUE",]
# define the basic function
circStats <- function(x) { # define descriptive statistics function
n = nrow(x)
bearing = mean.circular(x$mean)
sdbearing = sd.circular(x$mean)
meanR = mean(x$r, na.rm=T)
sdR = sd(x$r, na.rm=T)
ray = rayleigh.test(na.omit(x$mean))
r = ray$statistic
p = ray$p.value
signif = p < 0.05
return(data.frame(n, bearing,sdbearing, meanR, sdR, r, p, signif))
}
# and draw a circle to use for plots
circleFun <- function(center = c(0,0),diameter = 6, npoints = 100){
r = diameter / 2                                                 # note the radius of the circle = 3
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
# now we use the function
circle = circleFun()
circle = car2pol(circle) # converting to polar coordinates
circle$theta = (circle$theta * 180)/pi # converting to degrees
circle[100,c("theta")] = 359.99999 # and changing the last point so the circle draws completely
circle2 = circleFun(diameter=20)
circle2 = car2pol(circle2)
circle2$theta = (circle2$theta * 180)/pi
circle2[100,c("theta")] = 359.99999
# bin angles for plot
bin <- 5 # binning parameter
dneT <- subset(d, depth..m.=="18" & location=="near" & tide=="ebb")
# try larger groups
tg <- dneT
tg$ageG <- 0
tg[tg$fish_age..dph. <= 10,c("ageG")] <- "10&Under"
tg[tg$fish_age..dph. > 20,c("ageG")] <- "22&Over"
tg[tg$ageG == 0, c("ageG")] <- "12to20"
tg$ageG <- as.factor(tg$ageG)
circStatsAgeG <- ddply(tg,.(ageG),circStats) # run the statistics
circStatsAgeG$age <- circStatsAgeG$ageG
for (i in 1:nrow(circStatsAgeG)){
if (circStatsAgeG[i,c("bearing")]<=0){
circStatsAgeG[i,c("bearing")] <- 360 + circStatsAgeG[i,c("bearing")]
}
}
# bin angles for plot
tg$theta <- as.numeric(round_any(tg$mean, bin))
tg$theta[tg$theta==360] <- 0
# create a data.frame with count
counts <- count(tg, vars=c("theta","ageG"))
# repeat each point the appropriate number of times
tbg <- adply(counts, 1, function(x) {
data.frame(theta=x$theta,age=x$ageG, count=1:x$freq)
}, .expand=F)
# make the scale prettier
tbg$count <- 10 + tbg$count
pga <- ggplot(tbg) + polar() + # set the data and the polar layout
# draw circles on the plot for the r-axis
geom_line(data=circle, aes(theta,rho), color="gray") +
geom_line(data=circle2, aes(theta,rho), color="gray") +
# add the data
geom_point(aes(x=theta, y=count), size=2) + # add the bearings as stacked dots
geom_segment(aes(x=bearing, y=0, xend=bearing, yend=r*10), color="black", size = 1, data=circStatsAgeG) + # add the mean lines, w/ type determined by significance
facet_grid(age~.) +
# groom the plot a bit
scale_x_continuous("", limits=c(0,360), breaks=seq(0,360-1,by=45), labels=c("N","","","","S","","","")) + # set the X axis (angle axis)
theme_bw() +
theme(panel.grid.minor = element_line(size = .2, color = "white")) + theme(panel.grid.major = element_line(size=.5, color = "white")) + # remove x-axis grid, make y-axis grid black
theme(plot.title = element_text(face="bold", size=18)) + theme(axis.title.y = element_text(size=16, face="bold")) + # format the plot title and r-axis label
theme(axis.text.x = element_text(size=14, face="bold", vjust=.05)) + theme(axis.text.y = element_text(size=16)) + # adjust axis text
scale_y_continuous(breaks=c(0,3,6,10),labels=c(0,0.3,0.6,1)) +
# theme(strip.text.x = element_text(size=6, face="bold"), strip.background = element_rect(colour="black", fill="#CCCCFF"))  # format facet labels
theme(strip.background = element_blank(), strip.text.x = element_blank()) # or remove them
pga
View(circStatsAgeG)
